name: Deploy on TestPyPI PyPI

on:
  push:
    tags:
      - "**"

jobs:
  pypi-publish:
    name: upload release to PyPI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [pypi-test]

    environment: ${{ matrix.environment }}

    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # build and test the release package
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pre-commit/
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Set version
        run: |
          poetry self add poetry-git-version-plugin
          poetry set-git-version
      - name: Install venv
        run: poetry install --no-interaction
      - name: Run pre-commit hooks
        run: poetry run pre-commit run --all
      - name: Run bandit
        run: poetry run bandit .
      - name: Build
        run: poetry build
      - name: Test
        run: poetry run pytest -rA
      - uses: actions/upload-artifact@v4.3.3
        with:
          name: distfiles
          path: dist/
          if-no-files-found: error

      # publish the release package to PyPI
      - name: Publish package distribution
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ vars.REPOSITORY_URL }}
