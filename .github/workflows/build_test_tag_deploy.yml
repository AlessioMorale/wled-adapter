name: Build, Test, create SemVer tag

on:
  push:
    tags:
      - "**"
    branches:
      - main

jobs:
  build_and_test:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pre-commit/
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Set version
        run: |
          poetry self add poetry-git-version-plugin
          poetry set-git-version
      - name: Install venv
        run: poetry install --no-interaction
      - name: Run pre-commit hooks
        run: poetry run pre-commit run --all
      - name: Run bandit
        run: poetry run bandit .
      - name: Build
        run: poetry build
      - name: Test
        run: poetry run pytest -rA
      - uses: actions/upload-artifact@v4.5.0
        with:
          name: distfiles
          path: |
            dist/
            pyproject.toml
          if-no-files-found: error

  tag_a_release:
    needs: build_and_test
    runs-on: ubuntu-latest
    # only executed for commits
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate a token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.DEPLOYMENT_APP_ID }}
          private-key: ${{ secrets.DEPLOYMENT_APP_PRIVATE_KEY }}
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ steps.app-token.outputs.token }}
          default_bump: patch

  pypi-publish:
    name: Publish release to PyPI
    runs-on: ubuntu-latest
    # only executed for TAGS
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    strategy:
      matrix:
        environment: [pypi-test, pypi]

    environment: ${{ matrix.environment }}

    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # build and test the release package
      - uses: actions/download-artifact@v4.1.8
        with:
          name: distfiles
          if-no-files-found: error
      - name: Display the artifacts files
        run: ls -R ./dist/
      # publish the release package to PyPI
      - name: Publish package distribution
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ vars.REPOSITORY_URL }}
